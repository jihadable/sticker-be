package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/jihadable/sticker-be/graph/model"
	"github.com/jihadable/sticker-be/models"
	"github.com/jihadable/sticker-be/utils"
	"github.com/jihadable/sticker-be/utils/mapper"
	"github.com/jihadable/sticker-be/validators"
)

// PostUser is the resolver for the post_user field.
func (r *mutationResolver) PostUser(ctx context.Context, name string, email string, password string, phone string, address string) (*model.Auth, error) {
	user, err := r.UserService.AddUser(&models.User{
		Name:     name,
		Email:    email,
		Password: password,
		Phone:    phone,
		Address:  address,
	})
	if err != nil {
		return nil, err
	}

	_, err = r.CartService.AddCart(&models.Cart{CustomerId: user.Id})
	if err != nil {
		return nil, err
	}

	_, err = r.ConversationService.AddConversation(&models.Conversation{CustomerId: user.Id})
	if err != nil {
		return nil, err
	}

	token, err := utils.GenerateJWT(user.Id, user.Role)
	if err != nil {
		return nil, err
	}

	return &model.Auth{User: mapper.DBUserToGraphQLUser(user), Token: *token}, nil
}

// VerifyUser is the resolver for the verify_user field.
func (r *mutationResolver) VerifyUser(ctx context.Context, email string, password string) (*model.Auth, error) {
	user, err := r.UserService.VerifyUser(email, password)
	if err != nil {
		return nil, err
	}

	token, err := utils.GenerateJWT(user.Id, user.Role)
	if err != nil {
		return nil, err
	}

	return &model.Auth{User: mapper.DBUserToGraphQLUser(user), Token: *token}, nil
}

// UpdateUser is the resolver for the update_user field.
func (r *mutationResolver) UpdateUser(ctx context.Context, phone string, address string) (*model.User, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.UpdateUserById(credit["user_id"], &models.User{
		Phone:   phone,
		Address: address,
	})
	if err != nil {
		return nil, err
	}

	return mapper.DBUserToGraphQLUser(user), nil
}

// PostProduct is the resolver for the post_product field.
func (r *mutationResolver) PostProduct(ctx context.Context, name string, price int32, stock int32, description string, image graphql.Upload) (*model.Product, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	product, err := r.ProductService.AddProduct(&models.Product{
		Name:        name,
		Price:       int(price),
		Stock:       int(stock),
		Description: description,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBProductToGraphQLProduct(product), nil
}

// UpdateProduct is the resolver for the update_product field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, name string, price int32, stock int32, description string, image *graphql.Upload) (*model.Product, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	product, err := r.ProductService.UpdateProductById(id, &models.Product{
		Name:        name,
		Price:       int(price),
		Stock:       int(stock),
		Description: description,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBProductToGraphQLProduct(product), nil
}

// DeleteProduct is the resolver for the delete_product field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return false, err
	}

	err = r.ProductService.DeleteProductById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// PostCustomProduct is the resolver for the post_custom_product field.
func (r *mutationResolver) PostCustomProduct(ctx context.Context, name string, image graphql.Upload) (*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	customProduct, err := r.CustomProductService.AddCustomProduct(&models.CustomProduct{
		Name: name,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBCustomProductToGraphQLCustomProduct(customProduct), nil
}

// UpdateCustomProduct is the resolver for the update_custom_product field.
func (r *mutationResolver) UpdateCustomProduct(ctx context.Context, id string, name string, image *graphql.Upload) (*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	customProduct, err := r.CustomProductService.UpdateCustomProductById(id, &models.CustomProduct{
		Name: name,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBCustomProductToGraphQLCustomProduct(customProduct), nil
}

// DeleteCustomProduct is the resolver for the delete_custom_product field.
func (r *mutationResolver) DeleteCustomProduct(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return false, err
	}

	err = r.CustomProductService.DeleteCustomProductById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// PostCategory is the resolver for the post_category field.
func (r *mutationResolver) PostCategory(ctx context.Context, id string) (*model.Category, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	category, err := r.CategoryService.AddCategory(&models.Category{Id: id})
	if err != nil {
		return nil, err
	}

	return mapper.DBCategoryToGraphQLCategory(category), nil
}

// DeleteCategory is the resolver for the delete_category field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return false, err
	}

	err = r.CategoryService.DeleteCategoryById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// PostCartProduct is the resolver for the post_cart_product field.
func (r *mutationResolver) PostCartProduct(ctx context.Context, cartID string, productID *string, customProductID *string, quantity int32, size model.Size) (*model.CartProduct, error) {
	panic(fmt.Errorf("not implemented: PostCartProduct - post_cart_product"))
}

// UpdateCartProduct is the resolver for the update_cart_product field.
func (r *mutationResolver) UpdateCartProduct(ctx context.Context, id string, quantity int32, size model.Size) (*model.CartProduct, error) {
	panic(fmt.Errorf("not implemented: UpdateCartProduct - update_cart_product"))
}

// PostOrder is the resolver for the post_order field.
func (r *mutationResolver) PostOrder(ctx context.Context, orderItems []*model.OrderItem) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: PostOrder - post_order"))
}

// UpdateOrder is the resolver for the update_order field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, id string, status string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrder - update_order"))
}

// PostMessage is the resolver for the post_message field.
func (r *mutationResolver) PostMessage(ctx context.Context, conversationID string, productID *string, customProductID *string, message string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: PostMessage - post_message"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.GetUserById(credit["user_id"])
	if err != nil {
		return nil, err
	}

	return mapper.DBUserToGraphQLUser(user), nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id string) (*model.Product, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	product, err := r.ProductService.GetProductById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBProductToGraphQLProduct(product), nil
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	products, err := r.ProductService.GetProducts()
	if err != nil {
		return nil, err
	}

	productsResponse := make([]*model.Product, len(products))
	for i, product := range products {
		productsResponse[i] = mapper.DBProductToGraphQLProduct(product)
	}

	return productsResponse, nil
}

// CustomProduct is the resolver for the custom_product field.
func (r *queryResolver) CustomProduct(ctx context.Context, id string) (*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	customProduct, err := r.CustomProductService.GetCustomProductById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBCustomProductToGraphQLCustomProduct(customProduct), nil
}

// CustomProductsByUser is the resolver for the custom_products_by_user field.
func (r *queryResolver) CustomProductsByUser(ctx context.Context) ([]*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	customProducts, err := r.CustomProductService.GetCustomProductsByCustomer(credit["user_id"])
	if err != nil {
		return nil, err
	}

	customProductsResponse := make([]*model.CustomProduct, len(customProducts))
	for i, customProduct := range customProducts {
		customProductsResponse[i] = mapper.DBCustomProductToGraphQLCustomProduct(customProduct)
	}

	return customProductsResponse, nil
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context, id string) (*model.Category, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	category, err := r.CategoryService.GetCategoryById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBCategoryToGraphQLCategory(category), nil
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, nil)
	if err != nil {
		return nil, err
	}

	categories, err := r.CategoryService.GetCategories()
	if err != nil {
		return nil, err
	}

	categoriesResponse := make([]*model.Category, len(categories))
	for i, category := range categories {
		categoriesResponse[i] = mapper.DBCategoryToGraphQLCategory(category)
	}

	return categoriesResponse, nil
}

// CartByUser is the resolver for the cart_by_user field.
func (r *queryResolver) CartByUser(ctx context.Context) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: CartByUser - cart_by_user"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// OrdersByUser is the resolver for the orders_by_user field.
func (r *queryResolver) OrdersByUser(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByUser - orders_by_user"))
}

// ConversationByUser is the resolver for the conversation_by_user field.
func (r *queryResolver) ConversationByUser(ctx context.Context) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: ConversationByUser - conversation_by_user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//  - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//    it when you're done.
//  - You have helper methods in this file. Move them out to keep these resolver files clean.
/*
	func (r *queryResolver) Cart(ctx context.Context) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}
*/
