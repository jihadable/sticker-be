package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/jihadable/sticker-be/config"
	"github.com/jihadable/sticker-be/graph/model"
	"github.com/jihadable/sticker-be/models"
	"github.com/jihadable/sticker-be/utils"
	"github.com/jihadable/sticker-be/utils/mapper"
	"github.com/jihadable/sticker-be/validators"
)

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, name string, email string, password string, phone string, address string) (*model.Auth, error) {
	user, err := r.UserService.AddUser(&models.User{
		Name:     name,
		Email:    email,
		Password: password,
		Phone:    &phone,
		Address:  &address,
	})
	if err != nil {
		return nil, err
	}

	_, err = r.CartService.AddCart(&models.Cart{CustomerId: user.Id})
	if err != nil {
		return nil, err
	}

	admin, err := r.UserService.GetAdmin()
	if err != nil {
		return nil, err
	}

	conversation, err := r.ConversationService.AddConversation(&models.Conversation{
		CustomerId: user.Id,
		AdminId:    admin.Id,
	})
	if err != nil {
		return nil, err
	}

	newMessage, err := r.MessageService.AddMessage(&models.Message{
		ConversationId: conversation.Id,
		SenderId:       admin.Id,
		Message:        "Welcome to stikerin",
	})
	if err != nil {
		return nil, err
	}

	notification, err := r.NotificationService.AddNotification(&models.Notification{
		Type:        "new_message",
		RecipientId: user.Id,
		Title:       "Welcome to stikerin",
		Message:     newMessage.Message,
	})
	if err != nil {
		return nil, err
	}

	err = config.MessageTrigger("new_message", mapper.DBMessageToGraphQLMessage(newMessage))
	if err != nil {
		return nil, err
	}

	err = config.NotificationTrigger("new_notification_"+user.Id, mapper.DBNotificationToGraphQLNotification(notification))
	if err != nil {
		return nil, err
	}

	token, err := utils.GenerateJWT(user.Id, user.Role)
	if err != nil {
		return nil, err
	}

	return &model.Auth{User: mapper.DBUserToGraphQLUser(user), Token: *token}, nil
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, email string, password string) (*model.Auth, error) {
	user, err := r.UserService.VerifyUser(email, password)
	if err != nil {
		return nil, err
	}

	token, err := utils.GenerateJWT(user.Id, user.Role)
	if err != nil {
		return nil, err
	}

	return &model.Auth{User: mapper.DBUserToGraphQLUser(user), Token: *token}, nil
}

// UpdateUser is the resolver for the update_user field.
func (r *mutationResolver) UpdateUser(ctx context.Context, phone string, address string) (*model.User, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.UpdateUserById(credit["user_id"], &models.User{
		Phone:   &phone,
		Address: &address,
	})
	if err != nil {
		return nil, err
	}

	return mapper.DBUserToGraphQLUser(user), nil
}

// CreateProduct is the resolver for the create_product field.
func (r *mutationResolver) CreateProduct(ctx context.Context, name string, price int32, stock int32, description string, image graphql.Upload) (*model.Product, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	product, err := r.ProductService.AddProduct(&models.Product{
		Name:        name,
		Price:       int(price),
		Stock:       int(stock),
		Description: description,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBProductToGraphQLProduct(product), nil
}

// UpdateProduct is the resolver for the update_product field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, id string, name string, price int32, stock int32, description string, image *graphql.Upload) (*model.Product, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	product, err := r.ProductService.UpdateProductById(id, &models.Product{
		Name:        name,
		Price:       int(price),
		Stock:       int(stock),
		Description: description,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBProductToGraphQLProduct(product), nil
}

// DeleteProduct is the resolver for the delete_product field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return false, err
	}

	err = r.ProductService.DeleteProductById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateCustomProduct is the resolver for the create_custom_product field.
func (r *mutationResolver) CreateCustomProduct(ctx context.Context, name string, image graphql.Upload) (*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	customProduct, err := r.CustomProductService.AddCustomProduct(&models.CustomProduct{
		Name:       name,
		CustomerId: credit["user_id"],
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBCustomProductToGraphQLCustomProduct(customProduct), nil
}

// UpdateCustomProduct is the resolver for the update_custom_product field.
func (r *mutationResolver) UpdateCustomProduct(ctx context.Context, id string, name string, image *graphql.Upload) (*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	customProduct, err := r.CustomProductService.UpdateCustomProductById(id, &models.CustomProduct{
		Name: name,
	}, image)
	if err != nil {
		return nil, err
	}

	return mapper.DBCustomProductToGraphQLCustomProduct(customProduct), nil
}

// DeleteCustomProduct is the resolver for the delete_custom_product field.
func (r *mutationResolver) DeleteCustomProduct(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return false, err
	}

	err = r.CustomProductService.DeleteCustomProductById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateCategory is the resolver for the create_category field.
func (r *mutationResolver) CreateCategory(ctx context.Context, id string) (*model.Category, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	category, err := r.CategoryService.AddCategory(&models.Category{Id: id})
	if err != nil {
		return nil, err
	}

	return mapper.DBCategoryToGraphQLCategory(category), nil
}

// DeleteCategory is the resolver for the delete_category field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return false, err
	}

	err = r.CategoryService.DeleteCategoryById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateProductCategory is the resolver for the create_product_category field.
func (r *mutationResolver) CreateProductCategory(ctx context.Context, productID string, categoryID string) (*model.ProductCategory, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	productCategory, err := r.ProductCategoryService.AddProductCategory(&models.ProductCategory{
		ProductId:  productID,
		CategoryId: categoryID,
	})
	if err != nil {
		return nil, err
	}

	return mapper.DBProductCategoryToGraphQLProductCategory(productCategory), nil
}

// DeleteProductCategory is the resolver for the delete_product_category field.
func (r *mutationResolver) DeleteProductCategory(ctx context.Context, productID string, categoryID string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return false, err
	}

	err = r.ProductCategoryService.DeleteProductCategory(productID, categoryID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateCartProduct is the resolver for the create_cart_product field.
func (r *mutationResolver) CreateCartProduct(ctx context.Context, cartID string, productID *string, customProductID *string, quantity int32, size model.Size) (*model.CartProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	cartProduct, err := r.CartProductService.AddCartProduct(&models.CartProduct{
		CartId:          cartID,
		ProductId:       productID,
		CustomProductId: customProductID,
		Quantity:        int(quantity),
		Size:            string(size),
	})
	if err != nil {
		return nil, err
	}

	return mapper.DBCartProductToGraphQLCartProduct(cartProduct), nil
}

// UpdateCartProduct is the resolver for the update_cart_product field.
func (r *mutationResolver) UpdateCartProduct(ctx context.Context, id string, quantity int32, size model.Size) (*model.CartProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	cartProduct, err := r.CartProductService.UpdateCartProductById(id, &models.CartProduct{
		Quantity: int(quantity),
		Size:     string(size),
	})
	if err != nil {
		return nil, err
	}

	return mapper.DBCartProductToGraphQLCartProduct(cartProduct), nil
}

// DeleteCartProduct is the resolver for the delete_cart_product field.
func (r *mutationResolver) DeleteCartProduct(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return false, err
	}

	err = r.CartProductService.DeleteCartProductById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// CreateOrder is the resolver for the create_order field.
func (r *mutationResolver) CreateOrder(ctx context.Context, orderItems []*model.OrderItem, totalPrice int32) (*model.Order, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	orderProducts := make([]*models.OrderProduct, len(orderItems))
	for i, orderItem := range orderItems {
		orderProducts[i] = &models.OrderProduct{
			ProductId:       orderItem.ProductID,
			CustomProductId: orderItem.CustomProductID,
			Quantity:        int(orderItem.Quantity),
			Size:            string(orderItem.Size),
			SubtotalPrice:   int(orderItem.SubtotalPrice),
		}
	}

	order, err := r.OrderService.AddOrder(&models.Order{
		CustomerId: credit["user_id"],
		TotalPrice: int(totalPrice),
	}, orderProducts)
	if err != nil {
		return nil, err
	}

	return mapper.DBOrderToGraphQLOrder(order), nil
}

// UpdateOrder is the resolver for the update_order field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, id string, status string) (*model.Order, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleAdmin.String())
	if err != nil {
		return nil, err
	}

	order, err := r.OrderService.UpdateOrderById(id, &models.Order{Status: status})
	if err != nil {
		return nil, err
	}

	return mapper.DBOrderToGraphQLOrder(order), nil
}

// CreateMessage is the resolver for the create_message field.
func (r *mutationResolver) CreateMessage(ctx context.Context, conversationID string, productID *string, customProductID *string, message string) (*model.Message, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, r.UserService)
	if err != nil {
		return nil, err
	}

	newMessage, err := r.MessageService.AddMessage(&models.Message{
		ConversationId:  conversationID,
		ProductId:       productID,
		CustomProductId: customProductID,
		SenderId:        credit["user_id"],
		Message:         message,
	})
	if err != nil {
		return nil, err
	}

	conversation, err := r.ConversationService.GetConversationById(conversationID)
	if err != nil {
		return nil, err
	}

	var notifcationRecipientId string
	if newMessage.SenderId == conversation.CustomerId {
		notifcationRecipientId = conversation.AdminId
	} else {
		notifcationRecipientId = conversation.CustomerId
	}

	notification, err := r.NotificationService.AddNotification(&models.Notification{
		Type:        "new_message",
		RecipientId: notifcationRecipientId,
		Title:       "New message",
		Message:     newMessage.Message,
	})
	if err != nil {
		return nil, err
	}

	err = config.MessageTrigger("new_message", mapper.DBMessageToGraphQLMessage(newMessage))
	if err != nil {
		return nil, err
	}

	err = config.NotificationTrigger("new_notification_"+notifcationRecipientId, mapper.DBNotificationToGraphQLNotification(notification))
	if err != nil {
		return nil, err
	}

	return mapper.DBMessageToGraphQLMessage(newMessage), nil
}

// ReadNotification is the resolver for the read_notification field.
func (r *mutationResolver) ReadNotification(ctx context.Context, id string) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, r.UserService)
	if err != nil {
		return false, err
	}

	err = r.NotificationService.ReadNotificationById(id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ReadAllNotifications is the resolver for the read_all_notifications field.
func (r *mutationResolver) ReadAllNotifications(ctx context.Context) (bool, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, r.UserService)
	if err != nil {
		return false, err
	}

	err = r.NotificationService.ReadAllNotificationsByRecipient(credit["user_id"])
	if err != nil {
		return false, err
	}

	return true, nil
}

// GetUser is the resolver for the get_user field.
func (r *queryResolver) GetUser(ctx context.Context) (*model.User, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, r.UserService)
	if err != nil {
		return nil, err
	}

	user, err := r.UserService.GetUserById(credit["user_id"])
	if err != nil {
		return nil, err
	}

	return mapper.DBUserToGraphQLUser(user), nil
}

// GetProduct is the resolver for the get_product field.
func (r *queryResolver) GetProduct(ctx context.Context, id string) (*model.Product, error) {
	product, err := r.ProductService.GetProductById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBProductToGraphQLProduct(product), nil
}

// GetProducts is the resolver for the get_products field.
func (r *queryResolver) GetProducts(ctx context.Context) ([]*model.Product, error) {
	products, err := r.ProductService.GetProducts()
	if err != nil {
		return nil, err
	}

	productsResponse := make([]*model.Product, len(products))
	for i, product := range products {
		productsResponse[i] = mapper.DBProductToGraphQLProduct(product)
	}

	return productsResponse, nil
}

// GetCustomProduct is the resolver for the get_custom_product field.
func (r *queryResolver) GetCustomProduct(ctx context.Context, id string) (*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	customProduct, err := r.CustomProductService.GetCustomProductById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBCustomProductToGraphQLCustomProduct(customProduct), nil
}

// GetCustomProductsByCustomer is the resolver for the get_custom_products_by_user field.
func (r *queryResolver) GetCustomProductsByCustomer(ctx context.Context) ([]*model.CustomProduct, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	customProducts, err := r.CustomProductService.GetCustomProductsByCustomer(credit["user_id"])
	if err != nil {
		return nil, err
	}

	customProductsResponse := make([]*model.CustomProduct, len(customProducts))
	for i, customProduct := range customProducts {
		customProductsResponse[i] = mapper.DBCustomProductToGraphQLCustomProduct(customProduct)
	}

	return customProductsResponse, nil
}

// GetCategory is the resolver for the get_category field.
func (r *queryResolver) GetCategory(ctx context.Context, id string) (*model.Category, error) {
	category, err := r.CategoryService.GetCategoryById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBCategoryToGraphQLCategory(category), nil
}

// GetCategories is the resolver for the get_categories field.
func (r *queryResolver) GetCategories(ctx context.Context) ([]*model.Category, error) {
	categories, err := r.CategoryService.GetCategories()
	if err != nil {
		return nil, err
	}

	categoriesResponse := make([]*model.Category, len(categories))
	for i, category := range categories {
		categoriesResponse[i] = mapper.DBCategoryToGraphQLCategory(category)
	}

	return categoriesResponse, nil
}

// GetCartByCustomer is the resolver for the get_cart_by_user field.
func (r *queryResolver) GetCartByCustomer(ctx context.Context) (*model.Cart, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	cart, err := r.CartService.GetCartByCustomer(credit["user_id"])
	if err != nil {
		return nil, err
	}

	return mapper.DBCartToGraphQLCart(cart), nil
}

// GetOrder is the resolver for the get_order field.
func (r *queryResolver) GetOrder(ctx context.Context, id string) (*model.Order, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	_, err := validators.AuthValidator(authHeader, r.UserService)
	if err != nil {
		return nil, err
	}

	order, err := r.OrderService.GetOrderById(id)
	if err != nil {
		return nil, err
	}

	return mapper.DBOrderToGraphQLOrder(order), nil
}

// GetOrdersByCustomer is the resolver for the get_orders_by_user field.
func (r *queryResolver) GetOrdersByCustomer(ctx context.Context) ([]*model.Order, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	orders, err := r.OrderService.GetOrdersByCustomer(credit["user_id"])
	if err != nil {
		return nil, err
	}

	ordersResponse := make([]*model.Order, len(orders))
	for i, order := range orders {
		ordersResponse[i] = mapper.DBOrderToGraphQLOrder(order)
	}

	return ordersResponse, nil
}

// GetConversationByUser is the resolver for the get_conversation_by_user field.
func (r *queryResolver) GetConversationByUser(ctx context.Context) (*model.Conversation, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.RoleValidator(authHeader, r.UserService, model.RoleCustomer.String())
	if err != nil {
		return nil, err
	}

	conversation, err := r.ConversationService.GetConversationByCustomer(credit["user_id"])
	if err != nil {
		return nil, err
	}

	return mapper.DBConversationTOGraphQLConversation(conversation), nil
}

// GetNotificationsByRecipient is the resolver for the get_notifications_by_recipient field.
func (r *queryResolver) GetNotificationsByRecipient(ctx context.Context) ([]*model.Notification, error) {
	authHeader := ctx.Value(validators.AuthHeader).(string)
	credit, err := validators.AuthValidator(authHeader, r.UserService)
	if err != nil {
		return nil, err
	}

	notifications, err := r.NotificationService.GetNotificationsByRecipient(credit["user_id"])
	if err != nil {
		return nil, err
	}

	notificationsResponse := make([]*model.Notification, len(notifications))
	for i, notification := range notifications {
		notificationsResponse[i] = mapper.DBNotificationToGraphQLNotification(notification)
	}

	return notificationsResponse, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
