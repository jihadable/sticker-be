package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.75

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/jihadable/sticker-be/graph/model"
	"github.com/jihadable/sticker-be/models"
	"github.com/jihadable/sticker-be/services"
	"github.com/jihadable/sticker-be/utils/mapper"
)

// PostUser is the resolver for the post_user field.
func (r *mutationResolver) PostUser(ctx context.Context, name string, email string, password string, phone string, address string) (*model.Auth, error) {
	panic(fmt.Errorf("not implemented: PostUser - post_user"))
}

// VerifyUser is the resolver for the verify_user field.
func (r *mutationResolver) VerifyUser(ctx context.Context, email string, password string) (*model.Auth, error) {
	return &model.Auth{Token: "", User: &model.User{Email: email}}, nil
	// panic(fmt.Errorf("not implemented: VerifyUser - verify_user"))
}

// UpdateUser is the resolver for the update_user field.
func (r *mutationResolver) UpdateUser(ctx context.Context, phone string, address string) (*model.User, error) {
	panic(fmt.Errorf("not implemented: UpdateUser - update_user"))
}

// PostProduct is the resolver for the post_product field.
func (r *mutationResolver) PostProduct(ctx context.Context, name string, price int32, stock int32, description string, image graphql.Upload) (*model.Product, error) {
	storageService := services.NewStorageService()

	err := storageService.DeleteFile("754efeae-af74-431e-8772-47ed7d9a2bc3.png")
	if err != nil {
		return nil, err
	}

	return &model.Product{ID: "1"}, nil
	// panic(fmt.Errorf("not implemented: PostProduct - post_product"))
}

// UpdateProduct is the resolver for the update_product field.
func (r *mutationResolver) UpdateProduct(ctx context.Context, name string, price int32, stock int32, description string, image *graphql.Upload) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: UpdateProduct - update_product"))
}

// DeleteProduct is the resolver for the delete_product field.
func (r *mutationResolver) DeleteProduct(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteProduct - delete_product"))
}

// PostCustomProduct is the resolver for the post_custom_product field.
func (r *mutationResolver) PostCustomProduct(ctx context.Context, name string, image graphql.Upload) (*model.CustomProduct, error) {
	panic(fmt.Errorf("not implemented: PostCustomProduct - post_custom_product"))
}

// UpdateCustomProduct is the resolver for the update_custom_product field.
func (r *mutationResolver) UpdateCustomProduct(ctx context.Context, name string, image *graphql.Upload) (*model.CustomProduct, error) {
	panic(fmt.Errorf("not implemented: UpdateCustomProduct - update_custom_product"))
}

// DeleteCustomProduct is the resolver for the delete_custom_product field.
func (r *mutationResolver) DeleteCustomProduct(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCustomProduct - delete_custom_product"))
}

// PostCategory is the resolver for the post_category field.
func (r *mutationResolver) PostCategory(ctx context.Context, id string) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: PostCategory - post_category"))
}

// DeleteCategory is the resolver for the delete_category field.
func (r *mutationResolver) DeleteCategory(ctx context.Context, id string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteCategory - delete_category"))
}

// PostCartProduct is the resolver for the post_cart_product field.
func (r *mutationResolver) PostCartProduct(ctx context.Context, cartID string, productID *string, customProductID *string, quantity int32, size model.Size) (*model.CartProduct, error) {
	panic(fmt.Errorf("not implemented: PostCartProduct - post_cart_product"))
}

// UpdateCartProduct is the resolver for the update_cart_product field.
func (r *mutationResolver) UpdateCartProduct(ctx context.Context, id string, quantity int32, size model.Size) (*model.CartProduct, error) {
	panic(fmt.Errorf("not implemented: UpdateCartProduct - update_cart_product"))
}

// PostOrder is the resolver for the post_order field.
func (r *mutationResolver) PostOrder(ctx context.Context, orderItems []*model.OrderItem) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: PostOrder - post_order"))
}

// UpdateOrder is the resolver for the update_order field.
func (r *mutationResolver) UpdateOrder(ctx context.Context, id string, status string) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: UpdateOrder - update_order"))
}

// PostMessage is the resolver for the post_message field.
func (r *mutationResolver) PostMessage(ctx context.Context, conversationID string, productID *string, customProductID *string, message string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: PostMessage - post_message"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context) (*model.User, error) {
	// authHeader := ctx.Value(validators.AuthHeader).(string)
	// credit, err := validators.AuthValidator(authHeader, nil)
	// if err != nil {
	// 	return nil, err
	// }
	// fmt.Println(credit)

	// _, err := userService.GetUserById(credit["user_id"])
	// if err != nil {
	// 	return nil, err
	// }
	user := models.User{
		Name: "Umar",
		Role: "customer",
	}

	return mapper.DBUserToGraphQLUser(&user), nil
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context) (*model.Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context) ([]*model.Product, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// CustomProduct is the resolver for the custom_product field.
func (r *queryResolver) CustomProduct(ctx context.Context) (*model.CustomProduct, error) {
	panic(fmt.Errorf("not implemented: CustomProduct - custom_product"))
}

// CustomProductsByUser is the resolver for the custom_products_by_user field.
func (r *queryResolver) CustomProductsByUser(ctx context.Context) ([]*model.CustomProduct, error) {
	panic(fmt.Errorf("not implemented: CustomProductsByUser - custom_products_by_user"))
}

// Category is the resolver for the category field.
func (r *queryResolver) Category(ctx context.Context) (*model.Category, error) {
	panic(fmt.Errorf("not implemented: Category - category"))
}

// Categories is the resolver for the categories field.
func (r *queryResolver) Categories(ctx context.Context) ([]*model.Category, error) {
	panic(fmt.Errorf("not implemented: Categories - categories"))
}

// Cart is the resolver for the cart field.
func (r *queryResolver) Cart(ctx context.Context) (*model.Cart, error) {
	panic(fmt.Errorf("not implemented: Cart - cart"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context) (*model.Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// OrdersByUser is the resolver for the orders_by_user field.
func (r *queryResolver) OrdersByUser(ctx context.Context) ([]*model.Order, error) {
	panic(fmt.Errorf("not implemented: OrdersByUser - orders_by_user"))
}

// ConversationByUser is the resolver for the conversation_by_user field.
func (r *queryResolver) ConversationByUser(ctx context.Context) (*model.Conversation, error) {
	panic(fmt.Errorf("not implemented: ConversationByUser - conversation_by_user"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
